package com.github.davidcarboni.restolino.servlet;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.FileSystems;
import java.nio.file.Files;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpStatus;

/**
 * This servlet provides reloadable static content. It's designed for use in
 * development and isn't a complete implementation.
 * <p>
 * For example, it doesn't filter out WEB-INF and doesn't handle gzip encoding.
 * <p>
 * The aim is to provide efficient development through being reloadable. This is
 * not intended as an eficient production servlet. The expectation is that in
 * production you'd deploy new nodes or containers rather than update the
 * contents of a running webapp.
 * 
 * @author David Carboni
 * 
 */
public class StaticServlet extends HttpServlet {

	public static final String KEY_FILES = "restolino.files";

	/**
	 * Generated by Eclipse.
	 */
	private static final long serialVersionUID = -6140786554235846649L;

	static Charset utf8 = Charset.forName("UTF8");
	// TODO: make this a Path
	static File directory;

	@Override
	public void init() throws ServletException {

		String path = System.getProperty(KEY_FILES);

		// Only attempt to initialise if a path has been passed in:
		if (StringUtils.isNotBlank(path)) {

			// Get the canonical path.
			// This enables us to check requested files are in the web root:
			File directory;
			try {
				directory = new File(path).getCanonicalFile();
			} catch (IOException e) {
				throw new ServletException("Error getting canonical file for: "
						+ path);
			}

			// Check that the directory is valid:
			if (!directory.exists())
				throw new ServletException("Directory does not exist: "
						+ directory);
			else if (!directory.isDirectory())
				throw new ServletException("Directory is not a directory: "
						+ directory);

			StaticServlet.directory = directory;
		}
	}

	/**
	 * Returns a static content item from {@link #directory}. Assumes character
	 * encoding is UTF8 and that the content length will be the file size.
	 */
	@Override
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException {

		try {

			File file = new File(directory, request.getPathInfo());
			String path = file.getCanonicalPath();

			if (file.isDirectory()) {
				System.out
						.println("Disallowing directory request for: " + path);
				response.setStatus(HttpStatus.SC_FORBIDDEN);
			} else if (!file.isFile()) {
				System.out.println("Unable to locate a file at: " + path);
				response.setStatus(HttpStatus.SC_NOT_FOUND);
			} else if (!StringUtils.startsWith(file.getPath(),
					directory.getPath())) {
				// Disallow directories and files outside the configured
				// directory:
				// NB we don't care about WEB-INF, META-INF etc. for the moment.
				System.out.println("Disallowing request to: " + path
						+ " (not under the web root " + directory.getPath()
						+ ")");
				response.setStatus(HttpStatus.SC_FORBIDDEN);
			} else if (file.isFile()) {
				// String contentType = Files.probeContentType(p);
				String contentType = request.getServletContext().getMimeType(
						path);
				response.setStatus(HttpStatus.SC_OK);
				if (StringUtils.isNotBlank(contentType))
					response.setContentType(contentType);
				// response.setCharacterEncoding(utf8.name());
				response.setContentLengthLong(file.length());
				java.nio.file.Path p = FileSystems.getDefault().getPath(path);
				IOUtils.copy(Files.newBufferedReader(p, utf8),
						response.getOutputStream(), utf8);
			}

		} catch (IOException e) {
			throw new ServletException("Error reading static content", e);
		}
	}
}
